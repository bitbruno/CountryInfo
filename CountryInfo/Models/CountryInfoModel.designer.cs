#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CountryInfo.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="countryinfodb")]
	public partial class CountryInfoModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertContinent(Continent instance);
    partial void UpdateContinent(Continent instance);
    partial void DeleteContinent(Continent instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertInformation(Information instance);
    partial void UpdateInformation(Information instance);
    partial void DeleteInformation(Information instance);
    #endregion
		
		public CountryInfoModelDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["countryinfodbConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CountryInfoModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CountryInfoModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CountryInfoModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CountryInfoModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Continent> Continents
		{
			get
			{
				return this.GetTable<Continent>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<Information> Informations
		{
			get
			{
				return this.GetTable<Information>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Continents")]
	public partial class Continent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Continent_Name;
		
		private EntitySet<Country> _Countries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnContinent_NameChanging(string value);
    partial void OnContinent_NameChanged();
    #endregion
		
		public Continent()
		{
			this._Countries = new EntitySet<Country>(new Action<Country>(this.attach_Countries), new Action<Country>(this.detach_Countries));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Continent_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Continent_Name
		{
			get
			{
				return this._Continent_Name;
			}
			set
			{
				if ((this._Continent_Name != value))
				{
					this.OnContinent_NameChanging(value);
					this.SendPropertyChanging();
					this._Continent_Name = value;
					this.SendPropertyChanged("Continent_Name");
					this.OnContinent_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Continent_Country", Storage="_Countries", ThisKey="Id", OtherKey="Continent_ID")]
		public EntitySet<Country> Countries
		{
			get
			{
				return this._Countries;
			}
			set
			{
				this._Countries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Countries(Country entity)
		{
			this.SendPropertyChanging();
			entity.Continent = this;
		}
		
		private void detach_Countries(Country entity)
		{
			this.SendPropertyChanging();
			entity.Continent = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Countries")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Country_Name;
		
		private int _Continent_ID;
		
		private EntitySet<Information> _Informations;
		
		private EntityRef<Continent> _Continent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCountry_NameChanging(string value);
    partial void OnCountry_NameChanged();
    partial void OnContinent_IDChanging(int value);
    partial void OnContinent_IDChanged();
    #endregion
		
		public Country()
		{
			this._Informations = new EntitySet<Information>(new Action<Information>(this.attach_Informations), new Action<Information>(this.detach_Informations));
			this._Continent = default(EntityRef<Continent>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Country_Name
		{
			get
			{
				return this._Country_Name;
			}
			set
			{
				if ((this._Country_Name != value))
				{
					this.OnCountry_NameChanging(value);
					this.SendPropertyChanging();
					this._Country_Name = value;
					this.SendPropertyChanged("Country_Name");
					this.OnCountry_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Continent_ID", DbType="Int NOT NULL")]
		public int Continent_ID
		{
			get
			{
				return this._Continent_ID;
			}
			set
			{
				if ((this._Continent_ID != value))
				{
					if (this._Continent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContinent_IDChanging(value);
					this.SendPropertyChanging();
					this._Continent_ID = value;
					this.SendPropertyChanged("Continent_ID");
					this.OnContinent_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Information", Storage="_Informations", ThisKey="Id", OtherKey="Country_Id")]
		public EntitySet<Information> Informations
		{
			get
			{
				return this._Informations;
			}
			set
			{
				this._Informations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Continent_Country", Storage="_Continent", ThisKey="Continent_ID", OtherKey="Id", IsForeignKey=true)]
		public Continent Continent
		{
			get
			{
				return this._Continent.Entity;
			}
			set
			{
				Continent previousValue = this._Continent.Entity;
				if (((previousValue != value) 
							|| (this._Continent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Continent.Entity = null;
						previousValue.Countries.Remove(this);
					}
					this._Continent.Entity = value;
					if ((value != null))
					{
						value.Countries.Add(this);
						this._Continent_ID = value.Id;
					}
					else
					{
						this._Continent_ID = default(int);
					}
					this.SendPropertyChanged("Continent");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Informations(Information entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Informations(Information entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Informations")]
	public partial class Information : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Country_Id;
		
		private string _Information_Text;
		
		private System.DateTime _Time;
		
		private string _IPAddress;
		
		private string _Location;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCountry_IdChanging(int value);
    partial void OnCountry_IdChanged();
    partial void OnInformation_TextChanging(string value);
    partial void OnInformation_TextChanged();
    partial void OnTimeChanging(System.DateTime value);
    partial void OnTimeChanged();
    partial void OnIPAddressChanging(string value);
    partial void OnIPAddressChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    #endregion
		
		public Information()
		{
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country_Id", DbType="Int NOT NULL")]
		public int Country_Id
		{
			get
			{
				return this._Country_Id;
			}
			set
			{
				if ((this._Country_Id != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountry_IdChanging(value);
					this.SendPropertyChanging();
					this._Country_Id = value;
					this.SendPropertyChanged("Country_Id");
					this.OnCountry_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Information_Text", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Information_Text
		{
			get
			{
				return this._Information_Text;
			}
			set
			{
				if ((this._Information_Text != value))
				{
					this.OnInformation_TextChanging(value);
					this.SendPropertyChanging();
					this._Information_Text = value;
					this.SendPropertyChanged("Information_Text");
					this.OnInformation_TextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="DateTime NOT NULL")]
		public System.DateTime Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IPAddress", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string IPAddress
		{
			get
			{
				return this._IPAddress;
			}
			set
			{
				if ((this._IPAddress != value))
				{
					this.OnIPAddressChanging(value);
					this.SendPropertyChanging();
					this._IPAddress = value;
					this.SendPropertyChanged("IPAddress");
					this.OnIPAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Information", Storage="_Country", ThisKey="Country_Id", OtherKey="Id", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Informations.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Informations.Add(this);
						this._Country_Id = value.Id;
					}
					else
					{
						this._Country_Id = default(int);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
